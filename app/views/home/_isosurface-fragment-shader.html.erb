<% shaderName ||= "shader-fs" %>
<script id="<%= shaderName %>" type="x-shader/x-fragment">#version 300 es
    #ifdef GL_ES
    precision highp float;
    #endif

    in vec4 vPosition;
    in vec3 vUV;
    uniform lowp sampler3D uTextureLow;
    uniform lowp sampler3D uTextureHigh;
    uniform sampler2D uRainbowTexture;

    uniform bool uRainbow;

    uniform mat3 uNMatrix;
    uniform vec3 uBasisX, uBasisY, uBasisZ;

    out vec4 FragColor;

    uniform vec3 uPointLightingLocation;
    uniform vec3 uPointLightingSpecularColor;
    uniform vec3 uPointLightingDiffuseColor;
    uniform float uMaterialShininess;

    uniform vec4 uEmission;
    uniform vec4 uDiffuse;
    uniform vec4 uAmbient;
    uniform vec4 uSpecular;
    uniform bool uShowSpecularHighlights;
    uniform vec3 uAmbientColor;
    
    uniform bool uMultiple;

    uniform float uMaxLimit;
    uniform float uMax;
    uniform float uMin;
    uniform float uMaxThreshold;
    uniform float uMinThreshold;
    uniform vec3 uLocalMin;
    uniform vec3 uLocalMax;

    vec3 getDensity(vec3 uvw) {
        vec3 low = texture(uTextureLow, uvw).rgb;
        vec3 high = texture(uTextureHigh, uvw).rgb;
        vec3 light = (low * 255.0 + high * (255.0 * 256.0) ) / uMaxLimit;
        return light;
    }

    float gradient(vec3 uvw, vec3 basis, int i) {
        vec3 uvp = uvw + basis;
        vec3 uvm = uvw - basis;
        if (uvp[i] > 1.0) {
            return (getDensity(uvw).r - getDensity(uvm).r) * 2.0;
        } else if (uvm[i] < 0.0) {
            return (getDensity(uvp)[0] - getDensity(uvw).r) * 2.0;
        } else {
            return (getDensity(uvp).r - getDensity(uvm).r);
        }
    }
 
    void main(void) {
        if(uMultiple && 
           (vUV.s < uLocalMin.s || vUV.s > uLocalMax.s ||
            vUV.t < uLocalMin.t || vUV.t > uLocalMax.t )) {
            discard;
            return;
        }

        float alpha = 1.0;
        vec3 light = getDensity(vUV);

        const float eps=0.001;
        float l = light.r;
        if(l < uMinThreshold || l > uMaxThreshold) {
            discard;
            return;
        }

        // Reconstruct the normal
        vec3 rawNormal;
        if (vUV.s - uBasisX.s < uLocalMin.s || vUV.s + uBasisX.s > uLocalMax.s) {
            rawNormal = vec3(1, 0, 0);
        } else if (vUV.t - uBasisY.t < uLocalMin.t || vUV.t + uBasisY.t > uLocalMax.t) {
            rawNormal = vec3(0, 1, 0);
        } else if (vUV.p - uBasisZ.p < uLocalMin.p || vUV.p + uBasisZ.p > uLocalMax.p) {
            rawNormal = vec3(0, 0, 1);
        } else {
            float nX = gradient(vUV, uBasisX, 0);
            float nY = gradient(vUV, uBasisY, 1);
            float nZ = gradient(vUV, uBasisZ, 2);
            rawNormal = vec3(nX, nY, nZ);
        }
        vec3 normal = normalize(uNMatrix * rawNormal);
        
        vec4 emission = uEmission;
        vec4 diffuse = uDiffuse;
        vec4 ambient = uAmbient;
        vec4 specular = uSpecular;

        if(uRainbow) {
            float fac = uMax - uMin;
            float l2 = (light.r - uMin) / fac;
            vec4 color = vec4(texture(uRainbowTexture, vec2(l2, 0)).rgb, 1);
            emission = 0.5 * color;
        }
        
        alpha = 1.0;
        
        vec3 lightDirection = normalize(uPointLightingLocation - vPosition.xyz);

        float specularLightWeighting = 0.0;
        if (uShowSpecularHighlights) {
            vec3 eyeDirection = normalize(-vPosition.xyz);
            vec3 reflectionDirection = reflect(-lightDirection, normal);

            specularLightWeighting = pow(abs(dot(reflectionDirection, eyeDirection)), uMaterialShininess);
        }

        float diffuseLightWeighting = abs(dot(normal, lightDirection));
        light =
            emission.rgb + 
            uAmbientColor * ambient.rgb +
            + uPointLightingSpecularColor * specularLightWeighting * (specular).rgb
            + uPointLightingDiffuseColor * diffuseLightWeighting * (diffuse).rgb;

        FragColor = vec4(light, alpha);
        if(FragColor.a == 0.0) {
            discard;
        }
    }
</script>

