<% shaderName ||= "shader-fs" %>
<script id="<%= shaderName %>" type="x-shader/x-fragment">
    #ifdef GL_ES
    precision highp float;
    #endif

    varying vec4 vPosition;
    varying vec2 vUV;
    varying vec2 vLocalUV;
    uniform sampler2D uTextureLow;
    uniform sampler2D uTextureHigh;
    uniform sampler2D uRainbowTexture;

    uniform bool uRainbow;

    uniform bool uMultiple;
    uniform bool uEnableThreshold2;

    uniform float uMaxLimit;
    uniform float uMax;
    uniform float uMin;
    uniform float uMaxThreshold;
    uniform float uMinThreshold;
    uniform float uMaxThreshold2;
    uniform float uMinThreshold2;
    uniform float uOpacity;
    uniform vec2 uLocalMin;
    uniform vec2 uLocalMax;
 
    void main(void) {
        if(uMultiple && 
           (vLocalUV.s < uLocalMin.s || vLocalUV.s > uLocalMax.s ||
            vLocalUV.t < uLocalMin.t || vLocalUV.t > uLocalMax.t )) {
            discard;
            return;
        }

        float alpha = 1.0;
        vec3 low = texture2D(uTextureLow, vUV).rgb;
        vec3 high = texture2D(uTextureHigh, vUV).rgb;
        vec3 light = (low * 255.0 + high * (255.0 * 256.0) ) / uMaxLimit;

        const float eps=0.001;
        float l = light.r;
        if((light.r < uMinThreshold-eps || light.r > uMaxThreshold+eps) &&
           (!uEnableThreshold2 || l < uMinThreshold2-eps || l > uMaxThreshold2+eps)) {
            discard;
            return;
        }

        vec3 minrange = vec3(uMin, uMin, uMin);
        vec3 maxrange = vec3(uMax, uMax, uMax);
        vec3 fac = maxrange - minrange;
        light = (light - minrange) / fac;

        if(uRainbow) {
            light = texture2D(uRainbowTexture, vec2(light.r, 0)).rgb;
        }

        if (uMultiple && alpha != 0.0) {
            alpha = uOpacity;
        }
 
        gl_FragColor = vec4(light, alpha);
        if(gl_FragColor.a == 0.0) {
            discard;
        }
    }
</script>

